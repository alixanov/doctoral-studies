import React, { useState, useEffect, useRef } from 'react';
import {
  Box,
  TextField,
  Button,
  Typography,
  Avatar,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  Divider,
  CircularProgress,
  useTheme,
  useMediaQuery,
} from '@mui/material';
import { styled } from '@mui/material/styles';
import SendIcon from '@mui/icons-material/Send';
import { format, parseISO } from 'date-fns';
import { ru } from 'date-fns/locale';

// –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞, —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
const colors = {
  primary: '#173957',
  secondary: '#F5F7FA',
  accent: '#4CAF50',
  error: '#EF4444',
  text: '#37474F',
  lightText: '#78909C',
  background: '#FFFFFF',
  userMessage: '#E3F2FD',
  assistantMessage: '#F1F8E9',
};

// –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
const ChatContainer = styled(Box)(({ theme }) => ({
  maxWidth: "100%",
  margin: 'auto',
  height: 'calc(100vh - 64px)',
  display: 'flex',
  flexDirection: 'column',
  backgroundColor: colors.secondary,
  borderRadius: theme.spacing(2),
  overflow: 'hidden',
  [theme.breakpoints.down('sm')]: {
    height: 'calc(100vh - 32px)',
    borderRadius: 0,
  },
}));

const MessageList = styled(Box)(({ theme }) => ({
  flexGrow: 1,
  overflowY: 'auto',
  padding: theme.spacing(2),
  backgroundColor: colors.background,
}));

const InputContainer = styled(Box)(({ theme }) => ({
  padding: theme.spacing(2),
  borderTop: `1px solid ${colors.lightText}`,
  backgroundColor: colors.secondary,
  display: 'flex',
  alignItems: 'center',
  gap: theme.spacing(1),
  [theme.breakpoints.down('sm')]: {
    padding: theme.spacing(1),
  },
}));

const StyledTextField = styled(TextField)(({ theme }) => ({
  '& .MuiOutlinedInput-root': {
    borderRadius: 8,
    backgroundColor: colors.background,
    '& fieldset': {
      borderColor: colors.lightText,
    },
    '&:hover fieldset': {
      borderColor: colors.primary,
    },
    '&.Mui-focused fieldset': {
      borderColor: colors.primary,
    },
  },
  '& .MuiInputBase-input': {
    fontSize: 14,
    padding: theme.spacing(1.5),
  },
}));

const SendButton = styled(Button)(({ theme }) => ({
  backgroundColor: colors.primary,
  color: '#FFFFFF',
  borderRadius: 8,
  padding: theme.spacing(1, 2),
  textTransform: 'none',
  '&:hover': {
    backgroundColor: '#0D47A1',
  },
  '&:disabled': {
    backgroundColor: colors.lightText,
    color: '#FFFFFF',
  },
  [theme.breakpoints.down('sm')]: {
    minWidth: 48,
    padding: theme.spacing(1),
  },
}));

// –§–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const fakeMessages = [
  {
    id: 1,
    role: 'user',
    content: '–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –∫–æ—Å–º–æ—Å–µ?',
    timestamp: '2025-04-22T10:00:00Z',
  },
  {
    id: 2,
    role: 'assistant',
    content: '–ö–æ—Å–º–æ—Å ‚Äî —ç—Ç–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –ø–æ–ª–Ω–æ–µ –∑–≤–µ–∑–¥, –≥–∞–ª–∞–∫—Ç–∏–∫ –∏ –∑–∞–≥–∞–¥–æ–∫! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ —á–µ—Ä–Ω—ã—Ö –¥—ã—Ä–∞—Ö –∏–ª–∏ –æ –º–∏—Å—Å–∏—è—Ö –Ω–∞ –ú–∞—Ä—Å?',
    timestamp: '2025-04-22T10:01:00Z',
  },
  {
    id: 3,
    role: 'user',
    content: '–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —á–µ—Ä–Ω—ã–µ –¥—ã—Ä—ã.',
    timestamp: '2025-04-22T10:02:00Z',
  },
  {
    id: 4,
    role: 'assistant',
    content: '–ß–µ—Ä–Ω—ã–µ –¥—ã—Ä—ã ‚Äî —ç—Ç–æ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, –≥–¥–µ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –Ω–∞—Å—Ç–æ–ª—å–∫–æ —Å–∏–ª—å–Ω–∞, —á—Ç–æ –¥–∞–∂–µ —Å–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –≤—ã—Ä–≤–∞—Ç—å—Å—è. –û–Ω–∏ –æ–±—Ä–∞–∑—É—é—Ç—Å—è –∏–∑ –º–∞—Å—Å–∏–≤–Ω—ã—Ö –∑–≤–µ–∑–¥, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–ª–ª–∞–ø—Å–∏—Ä—É—é—Ç –ø–æ–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –º–∞—Å—Å–æ–π. –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: –∏—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç —Å–æ–±—ã—Ç–∏–π ‚Äî —Ç–æ—á–∫–∞ –Ω–µ–≤–æ–∑–≤—Ä–∞—Ç–∞!',
    timestamp: '2025-04-22T10:03:00Z',
  },
];

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç Gemini
const Gemini = () => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const [messages, setMessages] = useState(fakeMessages);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const messageListRef = useRef(null);

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    if (messageListRef.current) {
      messageListRef.current.scrollTop = messageListRef.current.scrollHeight;
    }
  }, [messages]);

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatTimestamp = (timestamp) => {
    try {
      const date = parseISO(timestamp);
      return format(date, 'HH:mm, dd MMMM yyyy', { locale: ru });
    } catch (error) {
      return '–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏';
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSend = () => {
    if (!input.trim()) return;

    const newUserMessage = {
      id: messages.length + 1,
      role: 'user',
      content: input,
      timestamp: new Date().toISOString(),
    };

    setMessages([...messages, newUserMessage]);
    setInput('');
    setLoading(true);

    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ (—Ñ–µ–π–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç)
    setTimeout(() => {
      const fakeResponse = {
        id: messages.length + 2,
        role: 'assistant',
        content: `–≠—Ç–æ –º–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å: "${input}". –Ø –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –∏–º–∏—Ç–∏—Ä—É—é —Ä–∞–±–æ—Ç—É, –Ω–æ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! üòä –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ?`,
        timestamp: new Date().toISOString(),
      };
      setMessages((prev) => [...prev, fakeResponse]);
      setLoading(false);
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter
  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend();
    }
  };

  return (
    <ChatContainer>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Box
        sx={{
          padding: theme.spacing(2),
          backgroundColor: colors.primary,
          color: '#FFFFFF',
          textAlign: 'center',
          borderBottom: `1px solid ${colors.lightText}`,
        }}
      >
        <Typography variant={isMobile ? 'h6' : 'h5'} fontWeight={600}>
          Gemini –ß–∞—Ç
        </Typography>
      </Box>

      {/* –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π */}
      <MessageList ref={messageListRef}>
        <List>
          {messages.map((message) => (
            <React.Fragment key={message.id}>
              <ListItem
                sx={{
                  flexDirection: 'column',
                  alignItems: message.role === 'user' ? 'flex-end' : 'flex-start',
                  padding: theme.spacing(1, 2),
                }}
              >
                <Box
                  sx={{
                    maxWidth: '70%',
                    backgroundColor:
                      message.role === 'user' ? colors.userMessage : colors.assistantMessage,
                    borderRadius: 8,
                    padding: theme.spacing(1.5),
                    boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
                  }}
                >
                  <ListItemAvatar
                    sx={{
                      display: 'flex',
                      justifyContent: message.role === 'user' ? 'flex-end' : 'flex-start',
                      minWidth: 0,
                    }}
                  >
                    <Avatar
                      sx={{
                        width: 32,
                        height: 32,
                        bgcolor: message.role === 'user' ? colors.primary : colors.accent,
                      }}
                    >
                      {message.role === 'user' ? '–Ø' : 'G'}
                    </Avatar>
                  </ListItemAvatar>
                  <ListItemText
                    primary={
                      <Typography
                        variant="body1"
                        sx={{ fontSize: isMobile ? 14 : 16, color: colors.text }}
                      >
                        {message.content}
                      </Typography>
                    }
                    secondary={
                      <Typography
                        variant="caption"
                        sx={{ color: colors.lightText, fontSize: isMobile ? 12 : 13 }}
                      >
                        {formatTimestamp(message.timestamp)}
                      </Typography>
                    }
                    sx={{
                      textAlign: message.role === 'user' ? 'right' : 'left',
                      margin: 0,
                    }}
                  />
                </Box>
              </ListItem>
              <Divider sx={{ margin: theme.spacing(1, 2) }} />
            </React.Fragment>
          ))}
          {loading && (
            <ListItem sx={{ justifyContent: 'center' }}>
              <CircularProgress size={24} sx={{ color: colors.primary }} />
            </ListItem>
          )}
        </List>
      </MessageList>

      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
      <InputContainer>
        <StyledTextField
          fullWidth
          multiline
          maxRows={4}
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyPress={handleKeyPress}
          placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
          variant="outlined"
          disabled={loading}
        />
        <SendButton
          onClick={handleSend}
          disabled={loading || !input.trim()}
          startIcon={isMobile ? null : <SendIcon />}
        >
          {isMobile ? <SendIcon /> : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
        </SendButton>
      </InputContainer>
    </ChatContainer>
  );
};

export default Gemini;